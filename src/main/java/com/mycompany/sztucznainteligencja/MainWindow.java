/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.sztucznainteligencja;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;

/**
 *
 * @author badzik
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    private Neuron[] neurons;
    private int numberofneurons;
    private int sizeofframe;
    private BufferedImage image;
    private BufferedImage grayscale;
    private BufferedImage[][] dividedimage;
    private Integer[][] result;

    public MainWindow() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Image compression");
        logTextArea.append("Uruchomiono program\n");
    }

    public void DisplayImage(BufferedImage img) {

        ImageIcon icon = new ImageIcon(img);

        if (icon.getIconHeight() > icon.getIconWidth()) {
            icon = new ImageIcon(icon.getImage().getScaledInstance(-1, DisplayLabel.getHeight(), BufferedImage.SCALE_SMOOTH));
        } else {
            icon = new ImageIcon(icon.getImage().getScaledInstance(DisplayLabel.getWidth(), -1, BufferedImage.SCALE_SMOOTH));
        }
        DisplayLabel.setIcon(icon);

        Dimension imageSize = new Dimension(icon.getIconWidth(), icon.getIconHeight());
        DisplayLabel.setPreferredSize(imageSize);
        DisplayLabel.setHorizontalAlignment(JLabel.CENTER);
        DisplayLabel.setVerticalAlignment(JLabel.CENTER);
        DisplayLabel.revalidate();
        DisplayLabel.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        compressButton = new javax.swing.JButton();
        SizeOfFrameLabel = new javax.swing.JLabel();
        sizeComboBox = new javax.swing.JComboBox<>();
        NumberOfNeuronsLabel = new javax.swing.JLabel();
        numberofneuronsTextField = new javax.swing.JTextField();
        DisplayLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cyclesTextField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        compressButton.setText("Compress");
        compressButton.setEnabled(false);
        compressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compressButtonActionPerformed(evt);
            }
        });

        SizeOfFrameLabel.setText("Size of frame:");

        sizeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3", "4" }));

        NumberOfNeuronsLabel.setText("Number of neurons:");

        jLabel1.setText("Numer of learning cycles:");

        jMenu1.setText("File");

        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openMenuItem);

        jMenuBar1.add(jMenu1);
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SizeOfFrameLabel)
                    .addComponent(NumberOfNeuronsLabel)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97)
                        .addComponent(compressButton)
                        .addContainerGap(521, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(numberofneuronsTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                            .addComponent(cyclesTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DisplayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(compressButton)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SizeOfFrameLabel)
                        .addComponent(sizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NumberOfNeuronsLabel)
                            .addComponent(numberofneuronsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cyclesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(DisplayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.addChoosableFileFilter(new Filterjpg());
        int returnvalue = fc.showOpenDialog(this);
        if (returnvalue == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String[] divided = file.getName().split("\\.");
            if (divided[divided.length - 1].equalsIgnoreCase("JPG")) {
                try {

                    image = ImageIO.read(file);
                    DisplayImage(image);

                    logTextArea.append("Wczytano obraz\n");
                    compressButton.setEnabled(true);

                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                System.out.println("To nie jest plik jpg");
            }
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void compressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compressButtonActionPerformed
        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        ColorConvertOp op = new ColorConvertOp(cs, null);
        grayscale = op.filter(image, null);
        DisplayImage(grayscale);
        logTextArea.append("Dokonano konwersji na obraz czarno-biały\n");
        sizeofframe = Integer.parseInt(sizeComboBox.getSelectedItem().toString());
        dividedimage = MyImage.divide(grayscale, sizeofframe);
        logTextArea.append("Podzeielono ekran na " + (dividedimage[0].length * dividedimage.length) + "\n");

        //Inicjacja neuronów
        numberofneurons = Integer.parseInt(numberofneuronsTextField.getText());
        neurons = new Neuron[numberofneurons];

        for (int i = 0; i < numberofneurons; i++) {
            neurons[i] = new Neuron();
            neurons[i].randomize(sizeofframe * sizeofframe);
            logTextArea.append("Wylosowano wagi dla neuronu nr." + i + " : " + Arrays.toString(neurons[i].getWeights())+"\n");
        }
        
        logTextArea.append("Rozpoczęcie procesu uczenia\n");
        Compress.learningPhase(dividedimage, neurons, Integer.parseInt(cyclesTextField.getText()) , sizeofframe);
        logTextArea.append("Zakończenie procesu uczenia\n");
        
        for (int i = 0; i < numberofneurons; i++) {
            logTextArea.append("Po zmianie dla nr." + i + " : " + Arrays.toString(neurons[i].getWeights())+"\n");
        }
        
        result=Compress.compress(dividedimage, neurons, sizeofframe);
        int i=0,j=0;
        for(i=0;i<result.length;i++){
            for(j=0;j<result[i].length;j++){
                System.out.println(result[i][j]+ " ");
            }
        }
        System.out.println("ROzmiar:"+i*j);
        
    }//GEN-LAST:event_compressButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DisplayLabel;
    private javax.swing.JLabel NumberOfNeuronsLabel;
    private javax.swing.JLabel SizeOfFrameLabel;
    private javax.swing.JButton compressButton;
    private javax.swing.JTextField cyclesTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JTextField numberofneuronsTextField;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JComboBox<String> sizeComboBox;
    // End of variables declaration//GEN-END:variables
}
